@page "/weather"
@using ImaginaVinylStorePro.Data
@using SharedApp.Models
@inject ApplicationDbContext applicationDbContext
@rendermode RenderMode.InteractiveServer 

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
  @*   <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table> *@
       <div class="my-3 mx-2">
            <h1 class="title-xl">Novedades</h1>
            <hr class="border-gray-300 my-2" />
            <div class="overflow-y-auto">
                <div class="inline-flex space-x-4 px-3">
                    @foreach (var item in CatalogMusics)
                    {
                        <CardCatalogMusic MusicCatalog="item"></CardCatalogMusic>
                    }
                </div>
            </div>
        </div>
}

@code {
    private WeatherForecast[]? forecasts;
    private List<MusicCatalog> CatalogMusics;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        CatalogMusics = applicationDbContext.MusicCatalog.ToList();
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
